---
layout: layouts/base.njk
title: Dictionary
---

<h1>Dictionary</h1>
<div class="row" style="margin-bottom:1rem">
  <input id="q" type="search" placeholder="Search headwords, glosses, examples… (⌘/Ctrl+K)" autocomplete="off">
  <select id="pos">
    <option value="">All parts of speech</option>
    <option>noun</option>
    <option>verb</option>
    <option>adjective</option>
    <option>adverb</option>
    <option>pronoun</option>
    <option>postposition</option>
  </select>
  <label class="row" style="flex:0 0 auto; gap:.5rem"><input id="hasAudio" type="checkbox"> has audio</label>
  <button id="clear" type="button">Clear</button>
  <span id="count" class="muted" style="margin-left:auto"></span>
  </div>

<div id="list" class="grid"></div>
<noscript>
  <p class="muted">JavaScript is required for instant search. Below is a static list.</p>
  <ul>
    {% for e in dictionary | slice(0,100) %}
      <li>{{ e.head.roman or e.head.devanagari }} — {{ (e.senses and e.senses[0].definition) or '' }}</li>
    {% endfor %}
  </ul>
</noscript>
<dialog id="detail">
  <article class="card" style="max-width:720px">
    <h3 id="d-head"></h3>
    <p class="muted" id="d-pos"></p>
    <div id="d-senses"></div>
    <p class="muted" id="d-source"></p>
    <form method="dialog"><button>Close</button></form>
  </article>
  </dialog>

<template id="entry-tpl">
  <article class="card">
    <h3 class="head"></h3>
    <p class="muted pos"></p>
  </article>
  </template>

<script>
const $ = (s,el=document)=>el.querySelector(s);
const $$ = (s,el=document)=>Array.from(el.querySelectorAll(s));
const listEl = document.getElementById('list');
const qEl = document.getElementById('q');
const posEl = document.getElementById('pos');
const hasAudioEl = document.getElementById('hasAudio');
const countEl = document.getElementById('count');
const clearBtn = document.getElementById('clear');

let entries = [];
let index = [];

function norm(s){return (s||'').normalize('NFKD').replace(/[\u0300-\u036f]/g,'').toLowerCase()}

async function load(){
  const prefix = document.documentElement.dataset.prefix || '/';
  try {
    const data = await fetch(prefix + 'data/dictionary.json').then(r=>r.json());
    entries = Array.isArray(data) ? data : [];
    // Simple inline text index to keep client smaller and avoid extra network fetch
    index = entries.map(e => ({
      id: e.id,
      pos: e.pos || '',
      text: norm([
        e?.head?.devanagari || '',
        e?.head?.roman || '',
        ...(Array.isArray(e.senses) ? e.senses.flatMap(s => [s.gloss_en||'', s.definition||'', ...(Array.isArray(s.examples)? s.examples.flatMap(x=>[x.en||'', x.siraji||'']):[])]) : [])
      ].join(' \n '))
    }));
  } catch (e) {
    // Fallback to data embedded at build time (Eleventy data cascade)
    entries = {{ dictionary | dump | safe }};
    index = entries.map(e => ({
      id: e.id,
      pos: e.pos || '',
      text: norm([
        e?.head?.devanagari || '', e?.head?.roman || '',
        ...(Array.isArray(e.senses) ? e.senses.flatMap(s => [s.gloss_en||'', s.definition||'']) : [])
      ].join(' \n '))
    }));
  }
  render(filter(''));
}

function filter(query){
  const nq = norm(query);
  const pos = posEl.value;
  const needAudio = hasAudioEl.checked;
  let ids = index
    .filter(i => (!nq || i.text.includes(nq)) && (!pos || i.pos === pos))
    .map(i => i.id);
  let res = entries.filter(e => ids.includes(e.id));
  if (needAudio) res = res.filter(e => Array.isArray(e.audio) && e.audio.length>0);
  return res.slice(0, 500);
}

function render(items){
  listEl.innerHTML = '';
  countEl.textContent = `${items.length} shown`;
  const tpl = document.getElementById('entry-tpl');
  for (const e of items){
    const node = tpl.content.cloneNode(true);
    const head = e?.head?.devanagari || e?.head?.roman || e.id;
    $('.head', node).textContent = head;
    $('.pos', node).textContent = e.pos || '';
    const wrapper = document.createElement('div');
    wrapper.appendChild(node);
    wrapper.firstElementChild.addEventListener('click', ()=> openDetail(e));
    listEl.appendChild(wrapper.firstElementChild);
  }
}

function openDetail(e){
  const dlg = document.getElementById('detail');
  document.getElementById('d-head').textContent = e?.head?.devanagari || e?.head?.roman || e.id;
  document.getElementById('d-pos').textContent = e.pos || '';
  const sensesEl = document.getElementById('d-senses');
  sensesEl.innerHTML = '';
  const senses = Array.isArray(e.senses) ? e.senses : [];
  for (const s of senses){
    const sec = document.createElement('section');
    const def = s.definition || s.gloss_en || '';
    sec.innerHTML = `<p>${def}</p>`;
    if (Array.isArray(s.examples) && s.examples.length){
      const ul = document.createElement('ul');
      for (const ex of s.examples){
        const li = document.createElement('li');
        li.textContent = ex.en || ex.siraji || '';
        ul.appendChild(li);
      }
      sec.appendChild(ul);
    }
    sensesEl.appendChild(sec);
  }
  document.getElementById('d-source').textContent = e.sourcePage ? `Source page: ${e.sourcePage}` : '';
  if (typeof dlg.showModal === 'function') dlg.showModal();
}

qEl.addEventListener('input', () => render(filter(qEl.value)));
posEl.addEventListener('change', () => render(filter(qEl.value)));
hasAudioEl.addEventListener('change', () => render(filter(qEl.value)));
clearBtn.addEventListener('click', () => { qEl.value=''; posEl.value=''; hasAudioEl.checked=false; render(filter('')); qEl.focus(); });

window.addEventListener('keydown', (e)=>{
  if ((e.ctrlKey||e.metaKey) && e.key.toLowerCase()==='k'){ e.preventDefault(); qEl.focus(); }
});

// Pass pathPrefix from Eleventy into DOM for client scripts
document.documentElement.dataset.prefix = '{{ eleventy.env.pathPrefix }}';
load();
</script>


